19/05/31
-------------------------------------------------------------------------------------------------------------------

전자정부 표준 프레임워크
스프링 프레임워크 : java 플랫폼을 위한 오픈소스 애플리케이션 프레임워크
Hibernate, MyBatis : 데이터엑세스

프레임워크(=구조) : 소프트웨어의 특정한 클래스에 대해 재사용할 수 잇는 설계로 구성된 관련퇸 클래스의 집합
-> 모듈화, 재사용성, 확장성의 이점

애플리케이션 프레임워크(Application Framework)
: 소프트웨어 개발자가 응용 소프트웨어의 표준 구조를 구현하기 위해 사용하는 소프트웨어 프레임워크로 구성된다.

-------------------------------------------------------------------------------------------------------------------

* 스프링의 역사
- 2002년 로드 존슨(MVC)
- 정식등록 : 2004년 4월

버전 
2004년 3월 : 1.x
2006년 10월 : 2.x
2009년 12월 : 3.x
2014년 4월 : 4.x
2017년 9월 : 5.x

2006년 부터 SSH라는 용어 사용
s : spring
s : struts
h : hibernate

2013년이후 스트럿츠 2.3버전 기준으로 서비스 종료

전자정부 프레임워크는 스프링3.0기반으로 구축
초기에는 스프링 서브 프로젝트로 화면전환의 흐름을 관리하는 스프링 웹 플로, 
그후로 인증/허가 처리를 관리하는 스프링 시큐리티등 추가
일괄처리용의 스프링 배치 출시

최근에는 애플리케이션 개발을 간단하게해주는 스프링 부트가 주목받게됨.

-------------------------------------------------------------------------------------------------------------------

* 스프링을 설정하는 방법
1.0 ~ 3.0 버전 : Spring Legacy Project(현업에서 가장 사용 많이 하는 방법)
- 기본페이지로 jsp 사용

4.0 이후 버전 : Spring Boot(최신 기술(설정을 최소화))
- jsp페이지가아닌 기본 템플릿 사용

-------------------------------------------------------------------------------------------------------------------

HTML(정적) -> CHI(ASP) -> 서블릿, JSP -> EJB -> 스프링

현재에는 Ajax로 웹 브라우저에 풍부한 화면 구현
Ajax : javascript의 비동기 통신(XMLHttpRequest)을 사용해서 웹 브라우저의 화면이동없이 화면 일부를 변경하는 기술
           화면의 편리성 향상
           ex) google map의 화면이동이나 지도상에서 상점정보 표시
동기적 : 어떤 작업을 요청했을 때 그 작업이 종료될 때까지 기다린 후 다음(다른) 작업을 수행하는 방식
비동기적 : 어떤 작업을 요청했을 때 그 작업이 종료될 때 까지 기다리지 않고 다른 작업을 하고 있다가, 
                요청했던 작업이 종료되면 그에 대한 추가 작업을 수행하는 방식

-------------------------------------------------------------------------------------------------------------------

### Model1 vs Model2 ###

# Model1 
- 웹 브라우저의 요청을 JSP가 담당
- JSP가 요청을 받고 해당 요청에 대한 처리를 위해 빈즈와 통신
- 빈즈가 처리결과를 주면 그것을 클라이언트에 전달
- 장점 : 구조 간단, 개발 쉬움, 개발기간 짧다.
- 단점 : 유지보수가 어려움, 개발자와 디자이너의 말이 통해야함.

# Model2
- 클라이언트와 JSP사이에 컨틀로러가 끼어듬
- 요청을 컨트롤러(Servlet)에서 처리
- 요청에 따른 처리를 위해 빈즈와 통신
- 응답할 JSP 선택할 수 있다.
- 장점 : 컨트롤러와 뷰의 분리로 유지 보수가 좋음, 개발자와 디자이너의 역할 분담
- 단점 : 높은 수준의 이해도 필요, 설계에 많은 투자, 개발기간 길다.

# 선택방법
- 규모가 작고 유지보수가 작을 때 > Model1
- 규모가 크고 유지보수 많을 때 > Model2

# MVC
- Model : 데이터 생성, 저장, 처리
- View : 결과를 보여주고 입력 받은 화면 구성
- Controller : 입력의 흐름 제어, 요청 → Model / Model의 결과 → View

-------------------------------------------------------------------------------------------------------------------

# Redirect vs Dispatcher(forward)의 차이점
- redirect : response, 응답시 클라이언트에게 요청할 url을 알려주어 다시 요청 → 요청 url 변경
                    = 응답시 클라이언트에게 요청할 url을 알려주어 다시 요청하도록 하는 방식
   ex) response.sendRedirect("join.jsp");
- dispatcher : request, request의 attribute의 객체를 전달 가능 → 요청 url 변경 x
                       = Request(요청)이 살아있는 상태에서 수행을 이동시킨다.
   ex) RequestDispatcher dispatcher = request.getRequestDispatcher("join.jsp");
         dispatcher.forward(request, response);


-------------------------------------------------------------------------------------------------------------------

자바를 이용해 어플리케이션을 개발할 때 메이븐과 그래들같은 빌드 도구 사용하는데, 
이런 빌드 도구의 주요 특징 : 의존 모듈(jar) 관리
ex) 메이븐 : 중앙 리파지터라고 불리는 서버로부터 필요한 jar파일을 다운받아 처리

# Spring 개발환경 설정
- java와 jsp환경에서 개발자가 좀더 편안하게 프로젝트를 진행할 수 있도록 만들어 놓은 툴
- 스프링 개발 툴 : 기존의 이클립스에서 확장 프로그램 설치
- InteliJ : 안드로이드 웹개발에 주로 사용
- STS(Spring Tool Suite) 전용 툴 : 이클립스 전용 툴

-------------------------------------------------------------------------------------------------------------------

https://spring.io (Spring 설치)

sts4에서는 Spring Boot만 지원
Spring Legacy project를 지원하지 않기 대문에 해당 기능 추가
help > Eclipse Marketplace > spring tools 검색>  Spring Tools 3 Add on 설치

help > Install New Software > Web Developer Tools 설치

한글 인코딩 UTF-8 맞추기

http://mannaedu.com/bbs/board.php?bo_table=pds&wr_id=74 들어가 다운
import 하기

http://mvnrepository.com : 필요한 mvn 찾을 수 있음

-------------------------------------------------------------------------------------------------------------------

mappers : 데이터베이스와 연동되는것 처리

스프링 시작시 제일 먼저,
1. pom.xml : 프로젝트에 필요한 라이브러리를 다운로드 받고, 사용자 > m2. 파일에 저장
2. web.xml
3. root-context.xml
4. servlet-context.xml

# 스프링에서 다음과 같이 자동으로 검색해서 객체 생성
@Controller : 컨트롤러 빈 (메인클래스가 됨)
@Repository : DAO(데이터베이스 관련 작업)
@Service : 서비스(비즈니스 관련 로직) bean
@Inject : 의존성 관계 주입

# 스프링 디렉토리 구조
- src/main/java : 자바 코드(Controller, Model, Service)
- src/main/resources : 자바 코드에서 참조하는 리소드 파일들(sqlMapconfig.xml mybatis의 mapper)
- src/test/java : 테스트 관련 코드
- src/main/webapp : 웹서비스 루트 디렉토리
- src/main/webapp/resource : js, css, image 관련 웹 리소스 파일들 저장
- src/main/webapp/WEB-INF : 외부에서 파일 경로나 디렉토리를 보지 못하게 제한
- src/main/webapp/WEB-INF/views : html, jsp 문서

------------------------------------------------------------------------------------------------------------------

# Controller와 View 실습
MainController 작성








