19/06/05
-------------------------------------------------------------------------------------------------------------------
## 상품관리 프로젝트

일반적인 방식
비동기적인 방식(ajax)

# 사용계정
sqlplus spring/1234

# 상품테이블 작성
create table product(
product_id number,
product_name varchar2(50),
price number default 0,
description clob,
picture_url varchar2(500),
primary key(product_id)
);

- clob : 최대 4G까지 입력 가능, 한 테이블에서 여러 컬럼에 사용 가능, 검색 가능
- long : 최대 2G까지 입력 가능, 한 테이블에서 1개 컬럼만 사용 가능, 검색 가능 X

# 상품데이터 삽입
insert into product values(1, '레몬', 1500, '레몬에 포함된 구연산은 피로회복에 좋고, 비타민C도 풍부합니다.', 'lemon.jpg');
insert into product values(2, '오렌지', 2000, '비타민C가 풍부합니다. 생과일주스도 마시면 좋습니다.', 'orange.jpg');
insert into product values(3, '키위', 3000, '비타민C가 풍부합니다. 다이어트 또는 미용에 좋습니다.', 'kiwi.jpg');
insert into product values(4, '포도', 5000, '폴리페놀을 다량함유하고 있어 항산화 작용을 합니다.', 'grape.jpg');
insert into product values(5, '딸기', 8000, '플라보노이드를 다량함유하고 있습니다.', 'strawberry.jpg');
insert into product values(6, '귤', 7000, '시네피린을 함유하고 있어 감기예방에 좋습니다.', 'tangerine.jpg');

update product set picture_url='lemon.png' where product_id=1;
update product set picture_url='orange.png' where product_id=2;
update product set picture_url='kiwi.png' where product_id=3;
update product set picture_url='grape.png' where product_id=4;
update product set picture_url='strawberry.png' where product_id=5;
update product set picture_url='tangerine.png' where product_id=6;
update product set picture_url='apple.png' where product_id=10;

상품코드를 위한 시퀀스 생성
create sequence seq_product start with 10 increment by 1;
insert into product values(seq_product.nextval, '사과', 1500, '맛있는 사과입니다.', 'apple.jpg');

// 라이브러리 추가
- 파일업로드관련
https://mvnrepository.com/search?q=common-fileupload
- 이미지 썸네일
https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib/4.2

-------------------------------------------------------------------------------------------------------------------

## 상품관리 실습예제
일반 사용자 : 상품목록보기, 장바구니담기, 장바구니 보기
관리자 : 상품등록, 상품수정/삭제

# 구현방법
테이블 생성 -> DTO -> DAO(인터페이스와 실행클래스) -> Mapper -> Service(인터페이스와 실행클래스) 

-------------------------------------------------------------------------------------------------------------------

# Model 객체 vs ModelAndView
- Model 
Model 객체를 파라미터로 받아서 데이터를 뷰로 넘길 수 있다.
model.addAttribute를 이용해서, 넘길 데이터의 이름과 값을 넣는다.
return 경로

- ModelAndView
Model 객체의 데이터와 뷰를 같이 보냄
ModelAndView 객체를 선언 및 생성 후, 
mv.setViewName("뷰의 경로");
mv.addObject("변수 이름", "데이터 값");
return mv;

 @ModelAttribute는 폼의 전체 데이터 전달, 즉 dto
 @RequestParam은 폼의 개별데이터 전달
